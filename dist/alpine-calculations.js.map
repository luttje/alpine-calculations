{"version":3,"file":"alpine-calculations.js","sources":["../src/index.js","../builds/cdn.js"],"sourcesContent":["/**\n * AlpineJS Calculator Plugin\n *\n * A lightweight plugin for dynamic calculations in AlpineJS applications.\n * Provides directives for seamless reactive calculations.\n */\n\nlet handleNaN = (value) => value;\n\nfunction AlpineCalculator(Alpine) {\n  // Global registry to track all calculator sources\n  const sourceRegistry = new Map();\n  const expressionRegistry = new Map();\n\n  /**\n   * Retrieves all sources with a specific ID\n   *\n   * @param {string} id - The source ID to search for\n   * @returns {Array} Array of source objects\n   */\n  const getSourcesById = (id) => {\n    return Array.from(sourceRegistry.values())\n      .filter(source => source.id === id);\n  };\n\n  /**\n   * Sums all numeric values with a specific ID\n   *\n   * @param {string} id - The source ID to sum\n   * @returns {number} Sum of all values\n   */\n  const sumValuesWithId = (id) => {\n    return getSourcesById(id).reduce((sum, source) => {\n      const value = parseFloat(source.getValue()) || 0;\n\n      return sum + value;\n    }, 0);\n  };\n\n  /**\n   * Finds sources within a specific scope element\n   *\n   * @param {Element} scopeElement - The scope boundary element\n   * @param {string} id - The source ID to search for\n   * @returns {Array} Array of scoped source objects\n   */\n  const getScopedSources = (scopeElement, id) => {\n    return Array.from(sourceRegistry.values()).filter(source =>\n      source.id === id && scopeElement.contains(source.element)\n    );\n  };\n\n  /**\n   * Gets the first scoped value by ID within a scope\n   *\n   * @param {Element} scopeElement - The scope boundary element\n   * @param {string} id - The source ID\n   * @returns {number} The first matching value or 0\n   */\n  const getScopedValue = (scopeElement, id) => {\n    const sources = getScopedSources(scopeElement, id);\n\n    return sources.length > 0\n      ? (parseFloat(sources[0].getValue()) || 0)\n      : 0;\n  };\n\n  /**\n   * Traverses up the DOM tree to find the closest scope element\n   *\n   * @param {Element} element - Starting element\n   * @param {string} scopeSelector - CSS selector for scope boundary\n   * @returns {Element} The scope element or document\n   */\n  const findScope = (element, scopeSelector) => {\n    if (!scopeSelector)\n      return document;\n\n    let current = element;\n\n    while (current && current !== document) {\n      if (current.matches && current.matches(scopeSelector)) {\n        return current;\n      }\n\n      current = current.parentElement;\n    }\n\n    return document;\n  };\n\n  /**\n   * Creates an evaluation context with utility functions and scoped values\n   *\n   * @param {Element} scopeElement - The scope boundary element\n   * @returns {Object} Context object for expression evaluation\n   */\n  const createEvaluationContext = (scopeElement) => {\n    const context = { sumValuesWithId };\n\n    if (scopeElement !== document) {\n      // Scoped context: only include sources within this scope\n      const scopedSources = Array.from(sourceRegistry.values())\n        .filter(source => scopeElement.contains(source.element));\n      const sourceIds = new Set(scopedSources.map(source => source.id));\n\n      sourceIds.forEach(id => {\n        context[id] = getScopedValue(scopeElement, id);\n      });\n    } else {\n      // Global context: include all sources\n      const allSources = Array.from(sourceRegistry.values());\n      const sourceGroups = {};\n\n      allSources.forEach(source => {\n        const value = parseFloat(source.getValue()) || 0;\n\n        if (!sourceGroups[source.id]) {\n          sourceGroups[source.id] = [];\n        }\n\n        sourceGroups[source.id].push(value);\n      });\n\n      // Add single values directly, arrays for multiple values\n      Object.entries(sourceGroups).forEach(([id, values]) => {\n        context[id] = values.length === 1\n          ? values[0]\n          : values;\n      });\n    }\n\n    return context;\n  };\n\n  /**\n   * Safely evaluates mathematical expressions with a limited context\n   *\n   * @param {string} expression - The expression to evaluate\n   * @param {Object} context - Variables and functions available to the expression\n   * @returns {number} Result of the expression or 0 on error\n   */\n  const evaluateExpression = (expression, context) => {\n    try {\n      const func = new Function(...Object.keys(context), `return ${expression}`);\n\n      return func(...Object.values(context));\n    } catch (error) {\n      console.warn('Calculator expression evaluation error:', error);\n\n      return 0;\n    }\n  };\n\n  /**\n   * Triggers updates for expressions that depend on a source ID\n   *\n   * @param {string} id - The source ID that changed\n   * @param {Element} changedElement - The element that triggered the change\n   */\n  const triggerUpdatesForId = (id, changedElement = null) => {\n    for (const [element, expressionData] of expressionRegistry.entries()) {\n      if (expressionData.expression.includes(id)) {\n        // Check scope constraints\n        if (\n          changedElement\n          && expressionData.scopeElement\n          && expressionData.scopeElement !== document\n        ) {\n          if (!expressionData.scopeElement.contains(changedElement)) {\n            continue;\n          }\n        }\n\n        expressionData.update();\n      }\n    }\n  };\n\n  /**\n   * Triggers global recalculation (used when sources are removed)\n   */\n  const triggerGlobalRecalculation = () => {\n    // Update all expressions\n    for (const [element, expressionData] of expressionRegistry.entries()) {\n      expressionData.update();\n    }\n  };\n\n  /**\n   * Extracts numeric value from various element types\n   *\n   * @param {Element} element - The element to extract value from\n   * @returns {number} Numeric value\n   */\n  const extractElementValue = (element) => {\n    if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {\n      return parseFloat(element.value) || 0;\n    }\n\n    return parseFloat(element.textContent) || 0;\n  };\n\n  /**\n   * Updates element content with calculated result\n   *\n   * @param {Element} element - The element to update\n   * @param {*} result - The calculated result\n   * @param {number} [fixedPlaces] - Number of decimal places to fix\n   */\n  const updateElementContent = (element, result, fixedPlaces) => {\n    if (isNaN(result)) {\n      result = handleNaN(result);\n    }\n\n    const formattedResult = typeof result === 'number'\n      ? (\n        fixedPlaces\n          ? result.toFixed(parseInt(fixedPlaces))\n          : result\n      )\n      : result;\n\n    if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {\n      element.value = formattedResult;\n    } else {\n      element.textContent = formattedResult;\n    }\n  };\n\n  /**\n   * Directive: x-calculator-source\n   *\n   * Marks elements as calculation sources and tracks their values\n   */\n  Alpine.directive('calculator-source', (el, { expression }, { cleanup }) => {\n    const sourceId = expression;\n\n    // Create an object used to interface with the source\n    const source = {\n      id: sourceId,\n      element: el,\n      getValue: () => extractElementValue(el)\n    };\n    sourceRegistry.set(el, source);\n\n    // Trigger global recalculation when new source is registered\n    // This ensures expressions that depend on sumValuesWithId get updated\n    triggerGlobalRecalculation();\n\n    // Set up event listeners for value changes on this source\n    const events = ['input', 'change', 'keyup'];\n    const updateHandler = () => triggerUpdatesForId(sourceId, el);\n\n    events.forEach(event => {\n      el.addEventListener(event, updateHandler);\n    });\n\n    // Cleanup when directive is removed\n    cleanup(() => {\n      sourceRegistry.delete(el);\n\n      // Detach event listeners\n      events.forEach(event => {\n        el.removeEventListener(event, updateHandler);\n      });\n\n      // Trigger global recalculation after source removal\n      // Delay a frame to make sure DOM cleanup is complete\n      setTimeout(() => {\n        triggerGlobalRecalculation();\n      }, 0);\n    });\n  });\n\n  /**\n   * Directive: x-calculator-expression\n   *\n   * Evaluates expressions and updates element content reactively\n   */\n  Alpine.directive('calculator-expression', (el, { expression }, { effect, cleanup }) => {\n    let scopeElement = document;\n\n    // Determine scope element so we can isolate the values on which this expression depends\n    if (el.hasAttribute('x-calculator-scope')) {\n      const scopeSelector = el.getAttribute('x-calculator-scope');\n\n      scopeElement = scopeSelector\n        ? findScope(el, scopeSelector)\n        : el;\n    } else {\n      // Traverse parents to find one that limits scope with x-calculator-scope\n      let current = el.parentElement;\n\n      while (current && current !== document) {\n        if (current.hasAttribute('x-calculator-scope')) {\n          const scopeSelector = current.getAttribute('x-calculator-scope');\n\n          scopeElement = scopeSelector\n            ? findScope(current, scopeSelector)\n            : current;\n\n          break;\n        }\n\n        current = current.parentElement;\n      }\n    }\n\n    const updateExpression = () => {\n      const context = createEvaluationContext(scopeElement);\n      const result = evaluateExpression(expression, context);\n\n      // Store previous value to detect changes\n      const previousValue = el.tagName === 'INPUT' || el.tagName === 'TEXTAREA'\n        ? el.value\n        : el.textContent;\n\n      // Update element content\n      updateElementContent(el, result, el.getAttribute('x-calculator-precision'));\n\n      // If this element is also a source and its value changed, trigger cascading updates\n      const source = sourceRegistry.get(el);\n\n      if (source) {\n        const currentValue = el.tagName === 'INPUT' || el.tagName === 'TEXTAREA'\n          ? el.value\n          : el.textContent;\n\n        if (currentValue !== previousValue) {\n          triggerUpdatesForId(source.id, el);\n        }\n      }\n    };\n\n    // Register expression for dependency tracking\n    expressionRegistry.set(el, {\n      expression,\n      update: updateExpression,\n      scopeElement\n    });\n\n    // Initial calculation\n    updateExpression();\n\n    // Set up reactive effect\n    effect(updateExpression);\n\n    // Cleanup when directive is removed\n    cleanup(() => {\n      expressionRegistry.delete(el);\n    });\n  });\n\n  /**\n   * Directive: x-calculator-scope\n   *\n   * Defines calculation scope boundaries for isolation\n   */\n  Alpine.directive('calculator-scope', (el, { expression }, { cleanup }) => {\n    // Store scope selector for reference\n    el._calculatorScope = expression;\n\n    // Cleanup when directive is removed\n    cleanup(() => {\n      delete el._calculatorScope;\n    });\n  });\n\n  Alpine.calculator = AlpineCalculator;\n\n  // Trigger an event that we're ready\n  const event = new CustomEvent('alpine:calculator:ready', {\n    detail: {\n      calculator: AlpineCalculator,\n    },\n  });\n  document.dispatchEvent(event);\n}\n\n// Configuration function for future extensibility\nAlpineCalculator.configure = (config = {}) => {\n  if (typeof config['handleNaN'] === 'function') {\n    // Allow custom handling of NaN values in expressions\n    handleNaN = config['handleNaN'];\n  }\n\n  return AlpineCalculator;\n};\n\nexport default AlpineCalculator;\n","import calculations from '../src/index'\n\ndocument.addEventListener('alpine:initializing', () => {\n  calculations(window.Alpine)\n})\n"],"names":["handleNaN","value","AlpineCalculator","Alpine","sourceRegistry","Map","expressionRegistry","getSourcesById","id","Array","from","values","filter","source","sumValuesWithId","reduce","sum","parseFloat","getValue","getScopedSources","scopeElement","contains","element","getScopedValue","sources","length","findScope","scopeSelector","document","current","matches","parentElement","createEvaluationContext","context","scopedSources","sourceIds","Set","map","forEach","allSources","sourceGroups","push","Object","entries","evaluateExpression","expression","func","Function","keys","error","console","warn","triggerUpdatesForId","changedElement","expressionData","includes","update","triggerGlobalRecalculation","extractElementValue","tagName","textContent","updateElementContent","result","fixedPlaces","isNaN","formattedResult","toFixed","parseInt","directive","el","cleanup","sourceId","set","events","updateHandler","event","addEventListener","delete","removeEventListener","setTimeout","effect","hasAttribute","getAttribute","updateExpression","previousValue","get","currentValue","_calculatorScope","calculator","CustomEvent","detail","dispatchEvent","configure","config","calculations","window"],"mappings":"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"}