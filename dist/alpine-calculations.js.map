{"version":3,"file":"alpine-calculations.js","sources":["../src/index.js","../builds/cdn.js"],"sourcesContent":["/**\n * AlpineJS Calculator Plugin\n *\n * A lightweight plugin for dynamic calculations in AlpineJS applications.\n * Provides directives for seamless reactive calculations.\n */\n\nconst ATTRIBUTE_NAME_SCOPE = 'x-calculator-scope';\nconst ATTRIBUTE_NAME_PRECISION = 'x-calculator-precision';\n\n/**\n * Configuration settings\n */\nconst config = {\n  /**\n   * Default handler for NaN values.\n   */\n  handleNaN: (value) => value,\n\n  /**\n   * Default attribute name for locale override\n   */\n  localeAttribute: 'x-calculator-locale',\n};\n\n/**\n * Parses a localized number string as a float using the current locale.\n *\n * @param {string} str - The localized number string to parse\n * @param {string} [locale] - Optional locale string (defaults to current locale)\n * @returns {number} The parsed float number or NaN if parsing fails\n */\nfunction parseLocaleNumber(str, locale) {\n  if (typeof str !== 'string') {\n    return NaN;\n  }\n\n  // Trim whitespace\n  str = str.trim();\n  if (str === '') {\n    return NaN;\n  }\n\n  // Get locale-specific formatting info\n  const formatter = new Intl.NumberFormat(locale);\n  const parts = formatter.formatToParts(1234.5);\n\n  // Extract decimal and group separators from the locale\n  const decimalSep = parts.find(part => part.type === 'decimal')?.value || '.';\n  const groupSep = parts.find(part => part.type === 'group')?.value || ',';\n\n  // Handle negative numbers\n  const isNegative = str.startsWith('-') || str.startsWith('+');\n  const sign = str.startsWith('-') ? -1 : 1;\n  if (isNegative) {\n    str = str.substring(1);\n  }\n\n  let cleanStr = str;\n\n  // Escapes special regex characters\n  const escapeRegex = /[.*+?^${}()|[\\]\\\\]/g;\n  const regexEscape = (s) => s.replace(escapeRegex, '\\\\$&');\n\n  // Remove group separators (thousands separators)\n  if (groupSep !== decimalSep) {\n    // Handle the case where input might have regular spaces but locale uses non-breaking spaces\n    // or vice versa. We'll try to remove both the expected separator and common alternatives\n    const separatorsToRemove = [groupSep, '\\u00A0', ' ', '\\u2009', '\\u2005'];\n\n    for (const sep of separatorsToRemove) {\n      const escapedSep = regexEscape(sep);\n      const regex = new RegExp(escapedSep, 'g');\n\n      cleanStr = cleanStr.replace(regex, '');\n    }\n  }\n\n  // Convert decimal separator to standard dot\n  if (decimalSep !== '.') {\n    const escapedDecimalSep = regexEscape(decimalSep);\n\n    // Check for multiple decimal separators (invalid)\n    const decimalMatches = cleanStr.match(new RegExp(escapedDecimalSep, 'g'));\n    if (decimalMatches && decimalMatches.length > 1) {\n      return NaN;\n    }\n\n    cleanStr = cleanStr.replace(new RegExp(escapedDecimalSep, 'g'), '.');\n  } else {\n    // For standard dot decimal separator, check for multiple dots\n    const dotMatches = cleanStr.match(/\\./g);\n\n    if (dotMatches && dotMatches.length > 1) {\n      return NaN;\n    }\n  }\n\n  // Additional validation: empty string after cleaning should be NaN\n  if (cleanStr === '' || cleanStr === '.') {\n    return NaN;\n  }\n\n  // Parse the cleaned string\n  const result = parseFloat(cleanStr);\n\n  if (isNaN(result)) {\n    return NaN;\n  }\n\n  // Validate the result by checking if the cleaned string contains only valid characters\n  // Allow scientific notation (e/E) and basic number characters\n  if (!/^[0-9]*\\.?[0-9]*([eE][+-]?[0-9]+)?$/.test(cleanStr)) {\n    return NaN;\n  }\n\n  return result * sign;\n}\n\nfunction AlpineCalculator(Alpine) {\n  // Global registry to track all calculator sources\n  const sourceRegistry = new Map();\n  const expressionRegistry = new Map();\n\n  /**\n   * Retrieves all sources with a specific ID\n   *\n   * @param {string} id - The source ID to search for\n   * @returns {Array} Array of source objects\n   */\n  const getSourcesById = (id) => {\n    return Array.from(sourceRegistry.values())\n      .filter(source => source.id === id);\n  };\n\n  /**\n   * Sums all numeric values with a specific ID\n   *\n   * @param {string} id - The source ID to sum\n   * @returns {number} Sum of all values\n   */\n  const sumValuesWithId = (id) => {\n    return getSourcesById(id).reduce((sum, source) => {\n      const value = source.getValue() || 0;\n\n      return sum + value;\n    }, 0);\n  };\n\n  /**\n   * Finds sources within a specific scope element\n   *\n   * @param {Element} scopeElement - The scope boundary element\n   * @param {string} id - The source ID to search for\n   * @returns {Array} Array of scoped source objects\n   */\n  const getScopedSources = (scopeElement, id) => {\n    return Array.from(sourceRegistry.values()).filter(source =>\n      source.id === id && scopeElement.contains(source.element)\n    );\n  };\n\n  /**\n   * Gets the first scoped value by ID within a scope\n   *\n   * @param {Element} scopeElement - The scope boundary element\n   * @param {string} id - The source ID\n   * @returns {number} The first matching value or 0\n   */\n  const getScopedValue = (scopeElement, id) => {\n    const sources = getScopedSources(scopeElement, id);\n\n    return sources.length > 0\n      ? (sources[0].getValue() || 0)\n      : 0;\n  };\n\n  /**\n   * Traverses up the DOM tree to find the closest scope element\n   *\n   * @param {Element} element - Starting element\n   * @param {string} scopeSelector - CSS selector for scope boundary\n   * @returns {Element} The scope element or document\n   */\n  const findScope = (element, scopeSelector) => {\n    if (!scopeSelector)\n      return document;\n\n    let current = element;\n\n    while (current && current !== document) {\n      if (current.matches && current.matches(scopeSelector)) {\n        return current;\n      }\n\n      current = current.parentElement;\n    }\n\n    return document;\n  };\n\n  /**\n   * Creates global evaluation context with all sources, except those in\n   * the provided existing context (local scope), using those instead.\n   * This allows global scopes, but not creating arrays for single values\n   * that may exist across multiple scopes.\n   *\n   * @param {Object} existingContext - Existing context to exclude from global\n   * @returns {Object} Global context object\n   */\n  const createGlobalContext = (existingContext) => {\n    const context = { sumValuesWithId };\n    const allSources = Array.from(sourceRegistry.values());\n    const sourceGroups = {};\n\n    allSources.forEach(source => {\n      // If this source is already in the existing context, skip it and use\n      // that value instead\n      if (existingContext && existingContext[source.id] !== undefined) {\n        context[source.id] = existingContext[source.id];\n        return;\n      }\n\n      const value = source.getValue() || 0;\n\n      if (!sourceGroups[source.id]) {\n        sourceGroups[source.id] = [];\n      }\n\n      sourceGroups[source.id].push(value);\n    });\n\n    // Add single values directly, arrays for multiple values\n    Object.entries(sourceGroups).forEach(([id, values]) => {\n      context[id] = values.length === 1\n        ? values[0]\n        : values;\n    });\n\n    return context;\n  };\n\n  /**\n   * Creates an evaluation context with utility functions and scoped values\n   *\n   * @param {Element} scopeElement - The scope boundary element\n   * @returns {Object} Context object for expression evaluation\n   */\n  const createEvaluationContext = (scopeElement) => {\n    const context = { sumValuesWithId };\n\n    if (scopeElement !== document) {\n      // Scoped context: only include sources within this scope\n      const scopedSources = Array.from(sourceRegistry.values())\n        .filter(source => scopeElement.contains(source.element));\n      const sourceIds = new Set(scopedSources.map(source => source.id));\n\n      sourceIds.forEach(id => {\n        context[id] = getScopedValue(scopeElement, id);\n      });\n    } else {\n      // Global context: include all sources\n      return createGlobalContext();\n    }\n\n    return context;\n  };\n\n  /**\n   * Safely evaluates mathematical expressions with fallback to global context\n   *\n   * @param {string} expression - The expression to evaluate\n   * @param {Object} context - Variables and functions available to the expression\n   * @param {Element} scopeElement - The scope element for fallback\n   * @returns {number} Result of the expression or 0 on error\n   */\n  const evaluateExpression = (expression, context, scopeElement) => {\n    try {\n      const func = new Function(...Object.keys(context), `return ${expression}`);\n\n      return func(...Object.values(context));\n    } catch (error) {\n      // If scoped evaluation fails and we're in a scope, try global context\n      if (scopeElement !== document && error instanceof ReferenceError) {\n        try {\n          const globalContext = createGlobalContext(context);\n          const globalFunc = new Function(...Object.keys(globalContext), `return ${expression}`);\n\n          return globalFunc(...Object.values(globalContext));\n        } catch (globalError) {\n          console.warn('Calculator expression evaluation error:', globalError);\n\n          return 0;\n        }\n      }\n\n      console.warn('Calculator expression evaluation error:', error);\n\n      return 0;\n    }\n  };\n\n  /**\n   * Triggers updates for expressions that depend on a source ID\n   *\n   * @param {string} id - The source ID that changed\n   * @param {Element} changedElement - The element that triggered the change\n   */\n  const triggerUpdatesForId = (id, changedElement = null) => {\n    for (const [element, expressionData] of expressionRegistry.entries()) {\n      if (expressionData.expression.includes(id)) {\n        // Check scope constraints\n        if (\n          changedElement\n          && expressionData.scopeElement\n          && expressionData.scopeElement !== document\n        ) {\n          if (!expressionData.scopeElement.contains(changedElement)) {\n            continue;\n          }\n        }\n\n        expressionData.update();\n      }\n    }\n  };\n\n  /**\n   * Triggers global recalculation (used when sources are removed)\n   */\n  const triggerGlobalRecalculation = () => {\n    // Update all expressions\n    for (const [element, expressionData] of expressionRegistry.entries()) {\n      expressionData.update();\n    }\n  };\n\n  /**\n   * Gets the locale override from an element's attribute\n   *\n   * @param {Element} element - The element to check for locale override\n   * @returns {string|undefined} The locale override or undefined if not set\n   */\n  const getLocaleOverride = (element) => {\n    // If the element has a locale override attribute, use it\n    let localeOverride = element.getAttribute(config.localeAttribute);\n\n    // If it has no locale override, check the scope\n    if (!localeOverride && element.hasAttribute(ATTRIBUTE_NAME_SCOPE)) {\n      const scopeSelector = element.getAttribute(ATTRIBUTE_NAME_SCOPE);\n      const scopeElement = findScope(element, scopeSelector);\n\n      localeOverride = scopeElement.getAttribute(config.localeAttribute);\n    }\n\n    // If still no locale override, check the body attribute which will return null if not set\n    if (!localeOverride) {\n      localeOverride = document.body.getAttribute(config.localeAttribute);\n    }\n\n    if (!localeOverride) {\n      return undefined;\n    }\n\n    return localeOverride;\n  }\n\n  /**\n   * Extracts numeric value from various element types\n   *\n   * @param {Element} element - The element to extract value from\n   * @returns {string|number} Raw value for parsing\n   */\n  const extractElementValue = (element) => {\n    let localeOverride = getLocaleOverride(element);\n\n    if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {\n      // In JavaScript, the .value property of an `<input type=\"number\">` will always return\n      // a string in the standard format (using a dot as the decimal separator) regardless of\n      // the user's locale.\n      if (element.type === 'number') {\n        return parseFloat(element.value) || 0;\n      }\n\n      // For other input types, we must parse the value as a locale string\n      let parsed = parseLocaleNumber(element.value, localeOverride);\n\n      // If parsing fails, see if this is a boolean input\n      if (isNaN(parsed)) {\n        if (element.type === 'checkbox') {\n          return element.checked ? 1 : 0;\n        } else if (element.type === 'hidden') {\n          // Hidden inputs can have yes/no/true/false values\n          const value = element.value.trim().toLowerCase();\n\n          if (value === 'yes' || value === 'true') {\n            return true;\n          } else if (value === 'no' || value === 'false') {\n            return false;\n          }\n        }\n      }\n\n      return parsed;\n    }\n\n    return parseLocaleNumber(element.textContent, localeOverride);\n  };\n\n  /**\n   * Updates element content with calculated result\n   *\n   * @param {Element} element - The element to update\n   * @param {*} result - The calculated result\n   * @param {number} [decimalPlaces] - Number of decimal places to fix\n   */\n  const updateElementContent = (element, result, decimalPlaces) => {\n    if (isNaN(result)) {\n      result = config.handleNaN(result);\n    }\n\n    let localeOverride = getLocaleOverride(element);\n    let formattedResult = typeof result === 'number'\n      ? (\n        decimalPlaces\n          ? result.toLocaleString(localeOverride, {\n            minimumFractionDigits: parseInt(decimalPlaces),\n            maximumFractionDigits: parseInt(decimalPlaces)\n          })\n          : result.toLocaleString(localeOverride)\n      )\n      : result;\n\n    if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {\n      const isNumericInput = element.type === 'number';\n\n      if (isNumericInput) {\n        // For numeric inputs we must use en-US notation when setting it\n        formattedResult = decimalPlaces ?\n          result.toFixed(parseInt(decimalPlaces)) :\n          result;\n      }\n\n      element.value = formattedResult;\n    } else {\n      element.textContent = formattedResult;\n    }\n  };\n\n  /**\n   * Directive: x-calculator-source\n   *\n   * Marks elements as calculation sources and tracks their values\n   */\n  Alpine.directive('calculator-source', (el, { expression }, { cleanup }) => {\n    const sourceId = expression;\n\n    // Create an object used to interface with the source\n    const source = {\n      id: sourceId,\n      element: el,\n      getValue: () => extractElementValue(el)\n    };\n    sourceRegistry.set(el, source);\n\n    // Trigger global recalculation when new source is registered\n    // This ensures expressions that depend on sumValuesWithId get updated\n    triggerGlobalRecalculation();\n\n    // Set up event listeners for value changes on this source\n    const events = ['input', 'change', 'keyup'];\n    const updateHandler = () => triggerUpdatesForId(sourceId, el);\n\n    events.forEach(event => {\n      el.addEventListener(event, updateHandler);\n    });\n\n    // Cleanup when directive is removed\n    cleanup(() => {\n      sourceRegistry.delete(el);\n\n      // Detach event listeners\n      events.forEach(event => {\n        el.removeEventListener(event, updateHandler);\n      });\n\n      // Trigger global recalculation after source removal\n      // Delay a frame to make sure DOM cleanup is complete\n      setTimeout(() => {\n        triggerGlobalRecalculation();\n      }, 0);\n    });\n  });\n\n  /**\n   * Directive: x-calculator-expression\n   *\n   * Evaluates expressions and updates element content reactively\n   */\n  Alpine.directive('calculator-expression', (el, { expression }, { effect, cleanup }) => {\n    let scopeElement = document;\n\n    // Determine scope element so we can isolate the values on which this expression depends\n    if (el.hasAttribute(ATTRIBUTE_NAME_SCOPE)) {\n      const scopeSelector = el.getAttribute(ATTRIBUTE_NAME_SCOPE);\n\n      scopeElement = scopeSelector\n        ? findScope(el, scopeSelector)\n        : el;\n    } else {\n      // Traverse parents to find one that limits scope with x-calculator-scope\n      let current = el.parentElement;\n\n      while (current && current !== document) {\n        if (current.hasAttribute(ATTRIBUTE_NAME_SCOPE)) {\n          const scopeSelector = current.getAttribute(ATTRIBUTE_NAME_SCOPE);\n\n          scopeElement = scopeSelector\n            ? findScope(current, scopeSelector)\n            : current;\n\n          break;\n        }\n\n        current = current.parentElement;\n      }\n    }\n\n    const updateExpression = () => {\n      const context = createEvaluationContext(scopeElement);\n      const result = evaluateExpression(expression, context, scopeElement);\n\n      // Store previous value to detect changes\n      const previousValue = el.tagName === 'INPUT' || el.tagName === 'TEXTAREA'\n        ? el.value\n        : el.textContent;\n\n      // Update element content\n      updateElementContent(el, result, el.getAttribute(ATTRIBUTE_NAME_PRECISION));\n\n      // If this element is also a source and its value changed, trigger cascading updates\n      const source = sourceRegistry.get(el);\n\n      if (source) {\n        const currentValue = el.tagName === 'INPUT' || el.tagName === 'TEXTAREA'\n          ? el.value\n          : el.textContent;\n\n        if (currentValue !== previousValue) {\n          triggerUpdatesForId(source.id, el);\n        }\n      }\n    };\n\n    // Register expression for dependency tracking\n    expressionRegistry.set(el, {\n      expression,\n      update: updateExpression,\n      scopeElement\n    });\n\n    // Initial calculation\n    updateExpression();\n\n    // Set up reactive effect\n    effect(updateExpression);\n\n    // Cleanup when directive is removed\n    cleanup(() => {\n      expressionRegistry.delete(el);\n    });\n  });\n\n  Alpine.calculator = AlpineCalculator;\n\n  // Trigger an event that we're ready\n  const event = new CustomEvent('alpine:calculator:ready', {\n    detail: {\n      calculator: AlpineCalculator,\n    },\n  });\n  document.dispatchEvent(event);\n}\n\n// Configuration function for future extensibility\nAlpineCalculator.configure = (desiredConfig = {}) => {\n  if (typeof desiredConfig['handleNaN'] === 'function') {\n    // Allow custom handling of NaN values in expressions\n    config.handleNaN = desiredConfig.handleNaN;\n  }\n\n  if (typeof desiredConfig['localeAttribute'] === 'string') {\n    // Allow custom attribute name for locale overrides\n    config.localeAttribute = desiredConfig.localeAttribute;\n  }\n\n  return AlpineCalculator;\n};\n\nexport default AlpineCalculator;\n\nexport { parseLocaleNumber };\n","import calculations from '../src/index'\n\ndocument.addEventListener('alpine:initializing', () => {\n  calculations(window.Alpine)\n})\n"],"names":["ATTRIBUTE_NAME_SCOPE","ATTRIBUTE_NAME_PRECISION","config","handleNaN","value","localeAttribute","parseLocaleNumber","str","locale","NaN","trim","formatter","Intl","NumberFormat","parts","formatToParts","decimalSep","find","part","type","groupSep","isNegative","startsWith","sign","substring","cleanStr","escapeRegex","regexEscape","s","replace","separatorsToRemove","sep","escapedSep","regex","RegExp","escapedDecimalSep","decimalMatches","match","length","dotMatches","result","parseFloat","isNaN","test","AlpineCalculator","Alpine","sourceRegistry","Map","expressionRegistry","getSourcesById","id","Array","from","values","filter","source","sumValuesWithId","reduce","sum","getValue","getScopedSources","scopeElement","contains","element","getScopedValue","sources","findScope","scopeSelector","document","current","matches","parentElement","createGlobalContext","existingContext","context","allSources","sourceGroups","forEach","undefined","push","Object","entries","createEvaluationContext","scopedSources","sourceIds","Set","map","evaluateExpression","expression","func","Function","keys","error","ReferenceError","globalContext","globalFunc","globalError","console","warn","triggerUpdatesForId","changedElement","expressionData","includes","update","triggerGlobalRecalculation","getLocaleOverride","localeOverride","getAttribute","hasAttribute","body","extractElementValue","tagName","parsed","checked","toLowerCase","textContent","updateElementContent","decimalPlaces","formattedResult","toLocaleString","minimumFractionDigits","parseInt","maximumFractionDigits","isNumericInput","toFixed","directive","el","cleanup","sourceId","set","events","updateHandler","event","addEventListener","delete","removeEventListener","setTimeout","effect","updateExpression","previousValue","get","currentValue","calculator","CustomEvent","detail","dispatchEvent","configure","desiredConfig","calculations","window"],"mappings":"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"}